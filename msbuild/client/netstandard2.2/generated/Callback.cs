// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Callback.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface CallbackReceiver : Ice.Object, CallbackReceiverOperations_
    {
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface CallbackSender : Ice.Object, CallbackSenderOperations_
    {
    }
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_CallbackReceiver_callback();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public delegate void Callback_CallbackSender_initiateCallback();
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface CallbackReceiverPrx : Ice.ObjectPrx
    {
        void callback(string messageCallback, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task callbackAsync(string messageCallback, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_CallbackReceiver_callback> begin_callback(string messageCallback, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_callback(string messageCallback, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_callback(string messageCallback, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_callback(Ice.AsyncResult asyncResult);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface CallbackSenderPrx : Ice.ObjectPrx
    {
        void initiateCallback(Demo.CallbackReceiverPrx proxy, string message, Ice.OptionalContext context = new Ice.OptionalContext());

        _System.Threading.Tasks.Task initiateCallbackAsync(Demo.CallbackReceiverPrx proxy, string message, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken());

        Ice.AsyncResult<Demo.Callback_CallbackSender_initiateCallback> begin_initiateCallback(Demo.CallbackReceiverPrx proxy, string message, Ice.OptionalContext context = new Ice.OptionalContext());

        Ice.AsyncResult begin_initiateCallback(Demo.CallbackReceiverPrx proxy, string message, Ice.AsyncCallback callback, object cookie);

        Ice.AsyncResult begin_initiateCallback(Demo.CallbackReceiverPrx proxy, string message, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie);

        void end_initiateCallback(Ice.AsyncResult asyncResult);
    }
}

namespace Demo
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface CallbackReceiverOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void callback(string messageCallback, Ice.Current current = null);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public interface CallbackSenderOperations_
    {
        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
        void initiateCallback(Demo.CallbackReceiverPrx proxy, string message, Ice.Current current = null);
    }
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class CallbackReceiverPrxHelper : Ice.ObjectPrxHelperBase, CallbackReceiverPrx
    {
        public CallbackReceiverPrxHelper()
        {
        }

        public CallbackReceiverPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void callback(string messageCallback, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_callbackAsync(messageCallback, context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task callbackAsync(string messageCallback, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_callbackAsync(messageCallback, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_callbackAsync(string iceP_messageCallback, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_callback(iceP_messageCallback, context, synchronous, completed);
            return completed.Task;
        }

        private const string _callback_name = "callback";

        private void _iceI_callback(string iceP_messageCallback, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _callback_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    ostr.writeString(iceP_messageCallback);
                });
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Demo.Callback_CallbackReceiver_callback> begin_callback(string messageCallback, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_callback(messageCallback, context, null, null, false);
        }

        public Ice.AsyncResult begin_callback(string messageCallback, Ice.AsyncCallback callback, object cookie)
        {
            return begin_callback(messageCallback, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_callback(string messageCallback, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_callback(messageCallback, context, callback, cookie, false);
        }

        public void end_callback(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _callback_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_CallbackReceiver_callback> begin_callback(string iceP_messageCallback, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_CallbackReceiver_callback, object>(
                (Demo.Callback_CallbackReceiver_callback cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _callback_name, cookie, completedCallback);
            _iceI_callback(iceP_messageCallback, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CallbackReceiverPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CallbackReceiverPrx r = b as CallbackReceiverPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CallbackReceiverPrxHelper h = new CallbackReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CallbackReceiverPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CallbackReceiverPrx r = b as CallbackReceiverPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CallbackReceiverPrxHelper h = new CallbackReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CallbackReceiverPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CallbackReceiverPrxHelper h = new CallbackReceiverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CallbackReceiverPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CallbackReceiverPrxHelper h = new CallbackReceiverPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CallbackReceiverPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CallbackReceiverPrx r = b as CallbackReceiverPrx;
            if(r == null)
            {
                CallbackReceiverPrxHelper h = new CallbackReceiverPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CallbackReceiverPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            CallbackReceiverPrxHelper h = new CallbackReceiverPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::CallbackReceiver",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, CallbackReceiverPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CallbackReceiverPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CallbackReceiverPrxHelper result = new CallbackReceiverPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    [_System.Serializable]
    public sealed class CallbackSenderPrxHelper : Ice.ObjectPrxHelperBase, CallbackSenderPrx
    {
        public CallbackSenderPrxHelper()
        {
        }

        public CallbackSenderPrxHelper(_System.Runtime.Serialization.SerializationInfo info, _System.Runtime.Serialization.StreamingContext context) : base(info, context)
        {
        }

        #region Synchronous operations

        public void initiateCallback(Demo.CallbackReceiverPrx proxy, string message, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            try
            {
                _iceI_initiateCallbackAsync(proxy, message, context, null, _System.Threading.CancellationToken.None, true).Wait();
            }
            catch(_System.AggregateException ex_)
            {
                throw ex_.InnerException;
            }
        }

        #endregion

        #region Async Task operations

        public _System.Threading.Tasks.Task initiateCallbackAsync(Demo.CallbackReceiverPrx proxy, string message, Ice.OptionalContext context = new Ice.OptionalContext(), _System.IProgress<bool> progress = null, _System.Threading.CancellationToken cancel = new _System.Threading.CancellationToken())
        {
            return _iceI_initiateCallbackAsync(proxy, message, context, progress, cancel, false);
        }

        private _System.Threading.Tasks.Task _iceI_initiateCallbackAsync(Demo.CallbackReceiverPrx iceP_proxy, string iceP_message, Ice.OptionalContext context, _System.IProgress<bool> progress, _System.Threading.CancellationToken cancel, bool synchronous)
        {
            var completed = new IceInternal.OperationTaskCompletionCallback<object>(progress, cancel);
            _iceI_initiateCallback(iceP_proxy, iceP_message, context, synchronous, completed);
            return completed.Task;
        }

        private const string _initiateCallback_name = "initiateCallback";

        private void _iceI_initiateCallback(Demo.CallbackReceiverPrx iceP_proxy, string iceP_message, _System.Collections.Generic.Dictionary<string, string> context, bool synchronous, IceInternal.OutgoingAsyncCompletionCallback completed)
        {
            var outAsync = getOutgoingAsync<object>(completed);
            outAsync.invoke(
                _initiateCallback_name,
                Ice.OperationMode.Normal,
                Ice.FormatType.DefaultFormat,
                context,
                synchronous,
                write: (Ice.OutputStream ostr) =>
                {
                    Demo.CallbackReceiverPrxHelper.write(ostr, iceP_proxy);
                    ostr.writeString(iceP_message);
                });
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Demo.Callback_CallbackSender_initiateCallback> begin_initiateCallback(Demo.CallbackReceiverPrx proxy, string message, Ice.OptionalContext context = new Ice.OptionalContext())
        {
            return begin_initiateCallback(proxy, message, context, null, null, false);
        }

        public Ice.AsyncResult begin_initiateCallback(Demo.CallbackReceiverPrx proxy, string message, Ice.AsyncCallback callback, object cookie)
        {
            return begin_initiateCallback(proxy, message, new Ice.OptionalContext(), callback, cookie, false);
        }

        public Ice.AsyncResult begin_initiateCallback(Demo.CallbackReceiverPrx proxy, string message, Ice.OptionalContext context, Ice.AsyncCallback callback, object cookie)
        {
            return begin_initiateCallback(proxy, message, context, callback, cookie, false);
        }

        public void end_initiateCallback(Ice.AsyncResult asyncResult)
        {
            var resultI_ = IceInternal.AsyncResultI.check(asyncResult, this, _initiateCallback_name);
            ((IceInternal.OutgoingAsyncT<object>)resultI_.OutgoingAsync).getResult(resultI_.wait());
        }

        private Ice.AsyncResult<Demo.Callback_CallbackSender_initiateCallback> begin_initiateCallback(Demo.CallbackReceiverPrx iceP_proxy, string iceP_message, _System.Collections.Generic.Dictionary<string, string> context, Ice.AsyncCallback completedCallback, object cookie, bool synchronous)
        {
            var completed = new IceInternal.OperationAsyncResultCompletionCallback<Demo.Callback_CallbackSender_initiateCallback, object>(
                (Demo.Callback_CallbackSender_initiateCallback cb, object ret) =>
                {
                    if(cb != null)
                    {
                        cb.Invoke();
                    }
                },
                this, _initiateCallback_name, cookie, completedCallback);
            _iceI_initiateCallback(iceP_proxy, iceP_message, context, synchronous, completed);
            return completed;
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CallbackSenderPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CallbackSenderPrx r = b as CallbackSenderPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CallbackSenderPrxHelper h = new CallbackSenderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CallbackSenderPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CallbackSenderPrx r = b as CallbackSenderPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CallbackSenderPrxHelper h = new CallbackSenderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CallbackSenderPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CallbackSenderPrxHelper h = new CallbackSenderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CallbackSenderPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CallbackSenderPrxHelper h = new CallbackSenderPrxHelper();
                    h.iceCopyFrom(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CallbackSenderPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CallbackSenderPrx r = b as CallbackSenderPrx;
            if(r == null)
            {
                CallbackSenderPrxHelper h = new CallbackSenderPrxHelper();
                h.iceCopyFrom(b);
                r = h;
            }
            return r;
        }

        public static CallbackSenderPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            CallbackSenderPrxHelper h = new CallbackSenderPrxHelper();
            h.iceCopyFrom(bb);
            return h;
        }

        private static readonly string[] _ids =
        {
            "::Demo::CallbackSender",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Marshaling support

        public static void write(Ice.OutputStream ostr, CallbackSenderPrx v)
        {
            ostr.writeProxy(v);
        }

        public static CallbackSenderPrx read(Ice.InputStream istr)
        {
            Ice.ObjectPrx proxy = istr.readProxy();
            if(proxy != null)
            {
                CallbackSenderPrxHelper result = new CallbackSenderPrxHelper();
                result.iceCopyFrom(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Demo
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class CallbackReceiverDisp_ : Ice.ObjectImpl, CallbackReceiver
    {
        #region Slice operations

        public abstract void callback(string messageCallback, Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Demo::CallbackReceiver",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_callback(CallbackReceiver obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            string iceP_messageCallback;
            iceP_messageCallback = istr.readString();
            inS.endReadParams();
            obj.callback(iceP_messageCallback, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "callback",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return iceD_callback(this, inS, current);
                }
                case 1:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 2:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 3:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 4:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.7.0")]
    public abstract class CallbackSenderDisp_ : Ice.ObjectImpl, CallbackSender
    {
        #region Slice operations

        public abstract void initiateCallback(Demo.CallbackReceiverPrx proxy, string message, Ice.Current current = null);

        #endregion

        #region Slice type-related members

        private static readonly string[] _ids =
        {
            "::Demo::CallbackSender",
            "::Ice::Object"
        };

        public override bool ice_isA(string s, Ice.Current current = null)
        {
            return _System.Array.BinarySearch(_ids, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids(Ice.Current current = null)
        {
            return _ids;
        }

        public override string ice_id(Ice.Current current = null)
        {
            return _ids[0];
        }

        public static new string ice_staticId()
        {
            return _ids[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static _System.Threading.Tasks.Task<Ice.OutputStream>
        iceD_initiateCallback(CallbackSender obj, IceInternal.Incoming inS, Ice.Current current)
        {
            Ice.ObjectImpl.iceCheckMode(Ice.OperationMode.Normal, current.mode);
            var istr = inS.startReadParams();
            Demo.CallbackReceiverPrx iceP_proxy;
            string iceP_message;
            iceP_proxy = Demo.CallbackReceiverPrxHelper.read(istr);
            iceP_message = istr.readString();
            inS.endReadParams();
            obj.initiateCallback(iceP_proxy, iceP_message, current);
            return inS.setResult(inS.writeEmptyParams());
        }

        private static readonly string[] _all =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "initiateCallback"
        };

        public override _System.Threading.Tasks.Task<Ice.OutputStream>
        iceDispatch(IceInternal.Incoming inS, Ice.Current current)
        {
            int pos = _System.Array.BinarySearch(_all, current.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return Ice.ObjectImpl.iceD_ice_id(this, inS, current);
                }
                case 1:
                {
                    return Ice.ObjectImpl.iceD_ice_ids(this, inS, current);
                }
                case 2:
                {
                    return Ice.ObjectImpl.iceD_ice_isA(this, inS, current);
                }
                case 3:
                {
                    return Ice.ObjectImpl.iceD_ice_ping(this, inS, current);
                }
                case 4:
                {
                    return iceD_initiateCallback(this, inS, current);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        #endregion
    }
}
